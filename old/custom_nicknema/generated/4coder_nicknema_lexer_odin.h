#if !defined(FCODER_LEX_GEN_HAND_WRITTEN_TYPES)
#define FCODER_LEX_GEN_HAND_WRITTEN_TYPES

struct Lexeme_Table_Value{
    Token_Base_Kind base_kind;
    u16 sub_kind;
};

struct Lexeme_Table_Lookup{
    b32 found_match;
    Token_Base_Kind base_kind;
    u16 sub_kind;
};

#endif
typedef u16 Token_Odin_Kind;
enum{
TokenOdinKind_EOF = 0,
TokenOdinKind_Whitespace = 1,
TokenOdinKind_LexError = 2,
TokenOdinKind_BlockComment = 3,
TokenOdinKind_LineComment = 4,
TokenOdinKind_LiteralInteger = 5,
TokenOdinKind_LiteralIntegerBin = 6,
TokenOdinKind_LiteralIntegerOct = 7,
TokenOdinKind_LiteralIntegerHex = 8,
TokenOdinKind_LiteralFloat32 = 9,
TokenOdinKind_LiteralFloat64 = 10,
TokenOdinKind_LiteralComplex = 11,
TokenOdinKind_LiteralString = 12,
TokenOdinKind_LiteralStringRaw = 13,
TokenOdinKind_LiteralCharacter = 14,
TokenOdinKind_PackageName = 15,
TokenOdinKind_KeywordGeneric = 16,
TokenOdinKind_BraceOp = 17,
TokenOdinKind_BraceCl = 18,
TokenOdinKind_ParenOp = 19,
TokenOdinKind_BrackOp = 20,
TokenOdinKind_ParenCl = 21,
TokenOdinKind_BrackCl = 22,
TokenOdinKind_Semicolon = 23,
TokenOdinKind_Plus = 24,
TokenOdinKind_Minus = 25,
TokenOdinKind_Star = 26,
TokenOdinKind_Div = 27,
TokenOdinKind_Mod = 28,
TokenOdinKind_ModMod = 29,
TokenOdinKind_Or = 30,
TokenOdinKind_Xor = 31,
TokenOdinKind_And = 32,
TokenOdinKind_AndXor = 33,
TokenOdinKind_LeftLeft = 34,
TokenOdinKind_RightRight = 35,
TokenOdinKind_Less = 36,
TokenOdinKind_LessEq = 37,
TokenOdinKind_Grtr = 38,
TokenOdinKind_GrtrEq = 39,
TokenOdinKind_EqEq = 40,
TokenOdinKind_NotEq = 41,
TokenOdinKind_AndAnd = 42,
TokenOdinKind_OrOr = 43,
TokenOdinKind_Not = 44,
TokenOdinKind_Carrot = 45,
TokenOdinKind_Dot = 46,
TokenOdinKind_Ternary = 47,
TokenOdinKind_Eq = 48,
TokenOdinKind_PlusEq = 49,
TokenOdinKind_MinusEq = 50,
TokenOdinKind_StarEq = 51,
TokenOdinKind_DivEq = 52,
TokenOdinKind_ModEq = 53,
TokenOdinKind_Colon = 54,
TokenOdinKind_ColonColon = 55,
TokenOdinKind_ColonEq = 56,
TokenOdinKind_MinusGrtr = 57,
TokenOdinKind_DotDot = 58,
TokenOdinKind_DotDotEq = 59,
TokenOdinKind_DotDotLess = 60,
TokenOdinKind_MinusMinusMinus = 61,
TokenOdinKind_LeftLeftEq = 62,
TokenOdinKind_RightRightEq = 63,
TokenOdinKind_Pound = 64,
TokenOdinKind_At = 65,
TokenOdinKind_Dollar = 66,
TokenOdinKind_Comma = 67,
TokenOdinKind_Asm = 68,
TokenOdinKind_AutoCast = 69,
TokenOdinKind_BitSet = 70,
TokenOdinKind_Break = 71,
TokenOdinKind_Case = 72,
TokenOdinKind_Cast = 73,
TokenOdinKind_Context = 74,
TokenOdinKind_Continue = 75,
TokenOdinKind_Defer = 76,
TokenOdinKind_Distinct = 77,
TokenOdinKind_Do = 78,
TokenOdinKind_Dynamic = 79,
TokenOdinKind_Else = 80,
TokenOdinKind_Enum = 81,
TokenOdinKind_Fallthrough = 82,
TokenOdinKind_For = 83,
TokenOdinKind_Foreign = 84,
TokenOdinKind_If = 85,
TokenOdinKind_Import = 86,
TokenOdinKind_In = 87,
TokenOdinKind_Map = 88,
TokenOdinKind_NotIn = 89,
TokenOdinKind_OrElse = 90,
TokenOdinKind_OrReturn = 91,
TokenOdinKind_Package = 92,
TokenOdinKind_Proc = 93,
TokenOdinKind_Return = 94,
TokenOdinKind_Struct = 95,
TokenOdinKind_Switch = 96,
TokenOdinKind_Transmute = 97,
TokenOdinKind_Typeid = 98,
TokenOdinKind_union = 99,
TokenOdinKind_Using = 100,
TokenOdinKind_When = 101,
TokenOdinKind_Where = 102,
TokenOdinKind_LiteralTrue = 103,
TokenOdinKind_LiteralFalse = 104,
TokenOdinKind_Identifier = 105,
TokenOdinKind_PPAssert = 106,
TokenOdinKind_PPPanic = 107,
TokenOdinKind_PPBoundsCheck = 108,
TokenOdinKind_PPNoBoundsCheck = 109,
TokenOdinKind_PPAlign = 110,
TokenOdinKind_PPPacked = 111,
TokenOdinKind_PPRawUnion = 112,
TokenOdinKind_PPNoNil = 113,
TokenOdinKind_PPSoa = 114,
TokenOdinKind_PPSimd = 115,
TokenOdinKind_PPConfig = 116,
TokenOdinKind_PPPartial = 117,
TokenOdinKind_PPNoAlias = 118,
TokenOdinKind_PPAnyInt = 119,
TokenOdinKind_PPCallerLocation = 120,
TokenOdinKind_PPLocation = 121,
TokenOdinKind_PPProcedure = 122,
TokenOdinKind_PPFile = 123,
TokenOdinKind_PPLine = 124,
TokenOdinKind_PPCVararg = 125,
TokenOdinKind_PPByPtr = 126,
TokenOdinKind_PPOptionalOk = 127,
TokenOdinKind_PPType = 128,
TokenOdinKind_PPDefined = 129,
TokenOdinKind_PPLoad = 130,
TokenOdinKind_PPLoadOr = 131,
TokenOdinKind_PPLoadHash = 132,
TokenOdinKind_PPUnknown = 133,
TokenOdinKind_AtPrivate = 134,
TokenOdinKind_AtRequire = 135,
TokenOdinKind_AtLinkName = 136,
TokenOdinKind_AtLinkPrefix = 137,
TokenOdinKind_AtExport = 138,
TokenOdinKind_AtLinkage = 139,
TokenOdinKind_AtDefaultCallingConvention = 140,
TokenOdinKind_AtLinkSection = 141,
TokenOdinKind_AtExtraLinkerFlags = 142,
TokenOdinKind_AtDeferredIn = 143,
TokenOdinKind_AtDeferredOut = 144,
TokenOdinKind_AtDeferredInOut = 145,
TokenOdinKind_AtDeferredNone = 146,
TokenOdinKind_AtDeprecated = 147,
TokenOdinKind_AtRequireResults = 148,
TokenOdinKind_AtWarning = 149,
TokenOdinKind_AtDisabled = 150,
TokenOdinKind_AtInit = 151,
TokenOdinKind_AtCold = 152,
TokenOdinKind_AtOptimizationMode = 153,
TokenOdinKind_AtStatic = 154,
TokenOdinKind_AtThreadLocal = 155,
TokenOdinKind_AtBuiltin = 156,
TokenOdinKind_AtObjcName = 157,
TokenOdinKind_AtObjcType = 158,
TokenOdinKind_AtObjcIsClassMethod = 159,
TokenOdinKind_AtRequireTargetFeature = 160,
TokenOdinKind_AtEnableTargetFeature = 161,
TokenOdinKind_COUNT = 162,
};
char *token_odin_kind_names[] = {
"EOF",
"Whitespace",
"LexError",
"BlockComment",
"LineComment",
"LiteralInteger",
"LiteralIntegerBin",
"LiteralIntegerOct",
"LiteralIntegerHex",
"LiteralFloat32",
"LiteralFloat64",
"LiteralComplex",
"LiteralString",
"LiteralStringRaw",
"LiteralCharacter",
"PackageName",
"KeywordGeneric",
"BraceOp",
"BraceCl",
"ParenOp",
"BrackOp",
"ParenCl",
"BrackCl",
"Semicolon",
"Plus",
"Minus",
"Star",
"Div",
"Mod",
"ModMod",
"Or",
"Xor",
"And",
"AndXor",
"LeftLeft",
"RightRight",
"Less",
"LessEq",
"Grtr",
"GrtrEq",
"EqEq",
"NotEq",
"AndAnd",
"OrOr",
"Not",
"Carrot",
"Dot",
"Ternary",
"Eq",
"PlusEq",
"MinusEq",
"StarEq",
"DivEq",
"ModEq",
"Colon",
"ColonColon",
"ColonEq",
"MinusGrtr",
"DotDot",
"DotDotEq",
"DotDotLess",
"MinusMinusMinus",
"LeftLeftEq",
"RightRightEq",
"Pound",
"At",
"Dollar",
"Comma",
"Asm",
"AutoCast",
"BitSet",
"Break",
"Case",
"Cast",
"Context",
"Continue",
"Defer",
"Distinct",
"Do",
"Dynamic",
"Else",
"Enum",
"Fallthrough",
"For",
"Foreign",
"If",
"Import",
"In",
"Map",
"NotIn",
"OrElse",
"OrReturn",
"Package",
"Proc",
"Return",
"Struct",
"Switch",
"Transmute",
"Typeid",
"union",
"Using",
"When",
"Where",
"LiteralTrue",
"LiteralFalse",
"Identifier",
"PPAssert",
"PPPanic",
"PPBoundsCheck",
"PPNoBoundsCheck",
"PPAlign",
"PPPacked",
"PPRawUnion",
"PPNoNil",
"PPSoa",
"PPSimd",
"PPConfig",
"PPPartial",
"PPNoAlias",
"PPAnyInt",
"PPCallerLocation",
"PPLocation",
"PPProcedure",
"PPFile",
"PPLine",
"PPCVararg",
"PPByPtr",
"PPOptionalOk",
"PPType",
"PPDefined",
"PPLoad",
"PPLoadOr",
"PPLoadHash",
"PPUnknown",
"AtPrivate",
"AtRequire",
"AtLinkName",
"AtLinkPrefix",
"AtExport",
"AtLinkage",
"AtDefaultCallingConvention",
"AtLinkSection",
"AtExtraLinkerFlags",
"AtDeferredIn",
"AtDeferredOut",
"AtDeferredInOut",
"AtDeferredNone",
"AtDeprecated",
"AtRequireResults",
"AtWarning",
"AtDisabled",
"AtInit",
"AtCold",
"AtOptimizationMode",
"AtStatic",
"AtThreadLocal",
"AtBuiltin",
"AtObjcName",
"AtObjcType",
"AtObjcIsClassMethod",
"AtRequireTargetFeature",
"AtEnableTargetFeature",
};
